"""Add initial data

Revision ID: 701e5dd452d4
Revises: 
Create Date: 2025-02-03 16:00:24.730567

"""
from alembic import op
import sqlalchemy as sa
from breeds import breeds


# revision identifiers, used by Alembic.
revision = '701e5dd452d4'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('species',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=120), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('pw_hash', sa.String(length=120), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('breeds',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('species_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['species_id'], ['species.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )

    # Insert species and breeds
    conn = op.get_bind()
    species_map = {}

    for species, breed_list in breeds.items():
        result = conn.execute(sa.text("INSERT INTO species (name) VALUES (:name) RETURNING id"), {"name": species})
        species_id = result.scalar()
        species_map[species] = species_id

        for breed in breed_list:
            conn.execute(sa.text("INSERT INTO breeds (species_id, name) VALUES (:species_id, :name)"),
                         {"species_id": species_id, "name": breed})
            
    op.create_table('pets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('pet_profile_photo', sa.String(length=200), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('adoption_date', sa.Date(), nullable=True),
    sa.Column('sex', sa.String(length=1), nullable=False),
    sa.Column('species_id', sa.Integer(), nullable=False),
    sa.Column('breed_id', sa.Integer(), nullable=True),
    sa.Column('sterilized', sa.Boolean(), nullable=False),
    sa.Column('microchip_number', sa.String(length=50), nullable=True),
    sa.Column('insurance_company', sa.String(length=100), nullable=True),
    sa.Column('insurance_number', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['breed_id'], ['breeds.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['species_id'], ['species.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('pets', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_pets_breed_id'), ['breed_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_pets_species_id'), ['species_id'], unique=False)

    op.create_table('external_deworming_tracker',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('pet_id', sa.Integer(), nullable=False),
    sa.Column('product_name', sa.String(length=100), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('next_dosis', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('internal_deworming_tracker',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('pet_id', sa.Integer(), nullable=False),
    sa.Column('product_name', sa.String(length=100), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('next_dosis', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pet_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=150), nullable=True),
    sa.Column('date_uploaded', sa.Date(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('medication_tracker',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('pet_id', sa.Integer(), nullable=False),
    sa.Column('product_name', sa.String(length=100), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('next_dosis', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('photos',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pet_id', sa.Integer(), nullable=False),
    sa.Column('image_url', sa.String(length=200), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=True),
    sa.Column('date_uploaded', sa.Date(), nullable=False),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vaccine_tracker',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('pet_id', sa.Integer(), nullable=False),
    sa.Column('vaccine_name', sa.String(length=100), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('next_dosis', sa.Date(), nullable=True),
    sa.Column('administered_by', sa.String(length=150), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('weight_tracker',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('pet_id', sa.Integer(), nullable=False),
    sa.Column('weight_in_kg', sa.Float(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Delete data before deleting tables
    conn = op.get_bind()
    conn.execute(sa.text("DELETE FROM breeds"))
    conn.execute(sa.text("DELETE FROM species"))

    # Delete tables
    with op.batch_alter_table('pets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_pets_species_id'))
        batch_op.drop_index(batch_op.f('ix_pets_breed_id'))

    op.drop_table('weight_tracker')
    op.drop_table('vaccine_tracker')
    op.drop_table('photos')
    op.drop_table('medication_tracker')
    op.drop_table('logs')
    op.drop_table('internal_deworming_tracker')
    op.drop_table('external_deworming_tracker')
    with op.batch_alter_table('pets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_pets_species_id'))
        batch_op.drop_index(batch_op.f('ix_pets_breed_id'))

    op.drop_table('pets')
    op.drop_table('breeds')
    op.drop_table('users')
    op.drop_table('species')
    # ### end Alembic commands ###
